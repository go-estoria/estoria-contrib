package strategy_test

import (
	"context"
	"fmt"
	"testing"
	"time"

	"github.com/go-estoria/estoria-contrib/mongodb/eventstore/strategy"
	"github.com/go-estoria/estoria/eventstore"
	"github.com/go-estoria/estoria/typeid"
	"github.com/gofrs/uuid/v5"
	"github.com/testcontainers/testcontainers-go"
	"github.com/testcontainers/testcontainers-go/modules/mongodb"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"go.mongodb.org/mongo-driver/mongo/readpref"
)

// func TestSingleCollectionStrategy_Integration_GetStreamIterator(t *testing.T) {
// 	if testing.Short() {
// 		t.Skip("skipping integration test")
// 	}

// 	t.Parallel()

// 	ctx := context.Background()

// 	mongoClient, err := createMongoDBContainer(t, ctx)
// 	if err != nil {
// 		t.Fatalf("failed to create MongoDB container: %v", err)
// 	}

// 	collection := mongoClient.Database("estoria").Collection("events")
// 	res, err := collection.InsertMany(ctx, []any{
// 		bson.M{
// 			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
// 			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79001", "event_type": "mockeventtypeA",
// 			"version": 1, "timestamp": "2025-11-05T12:34:01Z", "data": bson.M{},
// 		},
// 		bson.M{
// 			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
// 			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79002", "event_type": "mockeventtypeB",
// 			"version": 2, "timestamp": "2025-11-05T12:34:02Z", "data": bson.M{},
// 		},
// 		bson.M{
// 			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
// 			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79003", "event_type": "mockeventtypeC",
// 			"version": 3, "timestamp": "2025-11-05T12:34:03Z", "data": bson.M{},
// 		},
// 		bson.M{
// 			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
// 			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79002", "event_type": "mockeventtypeB",
// 			"version": 4, "timestamp": "2025-11-05T12:34:04Z", "data": bson.M{},
// 		},
// 		bson.M{
// 			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
// 			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79003", "event_type": "mockeventtypeC",
// 			"version": 5, "timestamp": "2025-11-05T12:34:05Z", "data": bson.M{},
// 		},
// 	})
// 	if err != nil {
// 		t.Fatalf("failed to insert events into MongoDB: %v", err)
// 	} else if len(res.InsertedIDs) != 5 {
// 		t.Fatalf("unexpected number of inserted IDs, want: 5, got: %d", len(res.InsertedIDs))
// 	}

// 	events := []*eventstore.Event{
// 		{
// 			ID:            typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79001"))),
// 			StreamID:      typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			StreamVersion: 1,
// 			Timestamp:     time.Date(2025, 11, 5, 12, 34, 01, 0, time.UTC),
// 			Data:          []byte{},
// 		},
// 		{
// 			ID:            typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79002"))),
// 			StreamID:      typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			StreamVersion: 2,
// 			Timestamp:     time.Date(2025, 11, 5, 12, 34, 02, 0, time.UTC),
// 			Data:          []byte{},
// 		},
// 		{
// 			ID:            typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79003"))),
// 			StreamID:      typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			StreamVersion: 3,
// 			Timestamp:     time.Date(2025, 11, 5, 12, 34, 03, 0, time.UTC),
// 			Data:          []byte{},
// 		},
// 		{
// 			ID:            typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79002"))),
// 			StreamID:      typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			StreamVersion: 4,
// 			Timestamp:     time.Date(2025, 11, 5, 12, 34, 04, 0, time.UTC),
// 			Data:          []byte{},
// 		},
// 		{
// 			ID:            typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79003"))),
// 			StreamID:      typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			StreamVersion: 5,
// 			Timestamp:     time.Date(2025, 11, 5, 12, 34, 05, 0, time.UTC),
// 			Data:          []byte{},
// 		},
// 	}

// 	for _, tt := range []struct {
// 		name         string
// 		haveStreamID typeid.UUID
// 		haveOpts     eventstore.ReadStreamOptions
// 		wantEvents   []*eventstore.Event
// 		wantErr      error
// 	}{
// 		{
// 			name:         "returns a default stream iterator",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			wantEvents:   []*eventstore.Event{events[0], events[1], events[2], events[3], events[4]},
// 		},
// 		{
// 			name:         "returns a forward stream iterator",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Forward,
// 			},
// 			wantEvents: []*eventstore.Event{events[0], events[1], events[2], events[3], events[4]},
// 		},
// 		{
// 			name:         "returns a reverse stream iterator",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Reverse,
// 			},
// 			wantEvents: []*eventstore.Event{events[4], events[3], events[2], events[1], events[0]},
// 		},
// 		{
// 			name:         "returns a forward stream iterator with an offset",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Forward,
// 				Offset:    2,
// 			},
// 			wantEvents: []*eventstore.Event{events[2], events[3], events[4]},
// 		},
// 		{
// 			name:         "returns a reverse stream iterator with an offset",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Reverse,
// 				Offset:    2,
// 			},
// 			wantEvents: []*eventstore.Event{events[2], events[1], events[0]},
// 		},
// 		{
// 			name:         "returns a forward stream iterator with a count",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Forward,
// 				Count:     2,
// 			},
// 			wantEvents: []*eventstore.Event{events[0], events[1]},
// 		},
// 		{
// 			name:         "returns a reverse stream iterator with a count",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Reverse,
// 				Count:     2,
// 			},
// 			wantEvents: []*eventstore.Event{events[4], events[3]},
// 		},
// 		{
// 			name:         "returns a forward stream iterator with an offset and a count",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Forward,
// 				Offset:    2,
// 				Count:     2,
// 			},
// 			wantEvents: []*eventstore.Event{events[2], events[3]},
// 		},
// 		{
// 			name:         "returns a reverse stream iterator with an offset and a count",
// 			haveStreamID: typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
// 			haveOpts: eventstore.ReadStreamOptions{
// 				Direction: eventstore.Reverse,
// 				Offset:    2,
// 				Count:     2,
// 			},
// 			wantEvents: []*eventstore.Event{events[2], events[1]},
// 		},
// 	} {
// 		t.Run(tt.name, func(t *testing.T) {
// 			haveStrategy, err := strategy.NewSingleCollectionStrategy(collection)
// 			if err != nil {
// 				t.Fatalf("unexpected error creating strategy: %v", err)
// 			}

// 			gotIter, err := haveStrategy.GetStreamIterator(context.Background(), tt.haveStreamID, tt.haveOpts)
// 			if err != nil {
// 				if tt.wantErr == nil {
// 					t.Errorf("unexpected no error creating stream iterator, but got: %v", err)
// 				} else if err.Error() != tt.wantErr.Error() {
// 					t.Errorf("unexpected error creating stream iterator, want: %v, got: %v", tt.wantErr, err)
// 				}
// 			} else if gotIter == nil {
// 				t.Fatalf("unexpected nil stream iterator")
// 			}

// 			gotEvents := []*eventstore.Event{}
// 			for {
// 				event, err := gotIter.Next(context.Background())
// 				if errors.Is(err, eventstore.ErrEndOfEventStream) {
// 					break
// 				} else if err != nil {
// 					t.Errorf("unexpected error reading event from stream iterator: %v", err)
// 				}

// 				gotEvents = append(gotEvents, event)
// 			}

// 			if len(gotEvents) != len(tt.wantEvents) {
// 				t.Errorf("unexpected number of events, want: %d, got: %d", len(tt.wantEvents), len(gotEvents))
// 			}

// 			for i, wantEvent := range tt.wantEvents {
// 				if gotEvents[i].StreamVersion != wantEvent.StreamVersion {
// 					t.Errorf("unexpected event version at index %d, want: %d, got: %d", i, wantEvent.StreamVersion, gotEvents[i].StreamVersion)
// 				}
// 			}
// 		})
// 	}
// }

func TestSingleCollectionStrategy_Integration_InsertStreamEvents(t *testing.T) {
	if testing.Short() {
		t.Skip("skipping integration test")
	}

	t.Parallel()

	ctx := context.Background()

	mongoClient, err := createMongoDBContainer(t, ctx)
	if err != nil {
		t.Fatalf("failed to create MongoDB container: %v", err)
	}

	collection := mongoClient.Database("estoria").Collection("events")

	t.Log("MongoDB collection:", collection.Name())

	events := []*eventstore.WritableEvent{
		{
			ID:        typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79001"))),
			Timestamp: time.Date(2025, 11, 5, 12, 34, 01, 0, time.UTC),
			Data:      []byte{},
		},
		{
			ID:        typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79002"))),
			Timestamp: time.Date(2025, 11, 5, 12, 34, 02, 0, time.UTC),
			Data:      []byte{},
		},
		{
			ID:        typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79003"))),
			Timestamp: time.Date(2025, 11, 5, 12, 34, 03, 0, time.UTC),
			Data:      []byte{},
		},
		{
			ID:        typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79002"))),
			Timestamp: time.Date(2025, 11, 5, 12, 34, 04, 0, time.UTC),
			Data:      []byte{},
		},
		{
			ID:        typeid.FromUUID("mockeventtype", uuid.Must(uuid.FromString("b112c50d-0834-4b78-a9e7-009d80b79003"))),
			Timestamp: time.Date(2025, 11, 5, 12, 34, 05, 0, time.UTC),
			Data:      []byte{},
		},
	}

	documents := []any{
		bson.M{
			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79001", "event_type": "mockeventtypeA",
			"version": 1, "timestamp": "2025-11-05T12:34:01Z", "data": bson.M{},
		},
		bson.M{
			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79002", "event_type": "mockeventtypeB",
			"version": 2, "timestamp": "2025-11-05T12:34:02Z", "data": bson.M{},
		},
		bson.M{
			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79003", "event_type": "mockeventtypeC",
			"version": 3, "timestamp": "2025-11-05T12:34:03Z", "data": bson.M{},
		},
		bson.M{
			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79002", "event_type": "mockeventtypeB",
			"version": 4, "timestamp": "2025-11-05T12:34:04Z", "data": bson.M{},
		},
		bson.M{
			"stream_id": "a422f08c-0981-49cd-8249-7a48e66a4e8c", "stream_type": "mockstreamtype",
			"event_id": "b112c50d-0834-4b78-a9e7-009d80b79003", "event_type": "mockeventtypeC",
			"version": 5, "timestamp": "2025-11-05T12:34:05Z", "data": bson.M{},
		},
	}

	for _, tt := range []struct {
		name          string
		haveStreamID  typeid.UUID
		haveEvents    []*eventstore.WritableEvent
		haveOpts      eventstore.AppendStreamOptions
		wantDocuments []any
		wantErr       error
	}{
		{
			name:          "inserts events into a new stream with default options",
			haveStreamID:  typeid.FromUUID("mockstreamtype", uuid.Must(uuid.FromString("a422f08c-0981-49cd-8249-7a48e66a4e8c"))),
			haveEvents:    []*eventstore.WritableEvent{events[0], events[1], events[2], events[3], events[4]},
			wantDocuments: []any{documents[0], documents[1], documents[2], documents[3], documents[4]},
		},
	} {
		t.Run(tt.name, func(t *testing.T) {
			haveStrategy, err := strategy.NewSingleCollectionStrategy(collection)
			if err != nil {
				t.Fatalf("unexpected error creating strategy: %v", err)
			}

			session, err := mongoClient.StartSession()
			if err != nil {
				t.Fatalf("unexpected error starting session: %v", err)
			}

			t.Log("MongoDB session:", session)

			defer func() {
				t.Log("Ending MongoDB session")
				session.EndSession(ctx)
				t.Log("Ended MongoDB session")
			}()

			txOpts := options.Transaction().SetReadPreference(readpref.Primary())

			gotResult, gotErr := session.WithTransaction(context.Background(), func(sessionCtx mongo.SessionContext) (any, error) {
				t.Log("MongoDB session context:", sessionCtx)
				t.Log("Inserting events into stream:", tt.haveStreamID)
				return haveStrategy.InsertStreamEvents(sessionCtx, tt.haveStreamID, tt.haveEvents, tt.haveOpts)
			}, txOpts)
			if gotErr != nil {
				if tt.wantErr == nil {
					t.Errorf("unexpected no error inserting events, but got: %v", gotErr)
				} else if err.Error() != tt.wantErr.Error() {
					t.Errorf("unexpected error inserting events, want: %v, got: %v", tt.wantErr, gotErr)
				}
				return
			} else if gotResult == nil {
				t.Fatalf("unexpected nil result")
			}

			if numInserted := len(gotResult.(*strategy.InsertStreamEventsResult).InsertedEvents); numInserted != len(tt.haveEvents) {
				t.Errorf("unexpected number of inserted events, want: %d, got: %d", len(tt.haveEvents), numInserted)
			}

			cursor, err := collection.Find(context.Background(), bson.M{"stream_id": tt.haveStreamID.String()})
			if err != nil {
				t.Fatalf("unexpected error finding events: %v", err)
			}

			gotDocuments := []any{}
			if err := cursor.All(context.Background(), &gotDocuments); err != nil {
				t.Fatalf("unexpected error reading documents: %v", err)
			}

			if len(gotDocuments) != len(tt.wantDocuments) {
				t.Errorf("unexpected number of documents, want: %d, got: %d", len(tt.wantDocuments), len(gotDocuments))
			}

			for i, wantDocument := range tt.wantDocuments {
				if gotDocuments[i] != wantDocument {
					t.Errorf("unexpected document at index %d, want: %v, got: %v", i, wantDocument, gotDocuments[i])
				}
			}
		})
	}
}

func createMongoDBContainer(t *testing.T, ctx context.Context) (*mongo.Client, error) {
	t.Helper()

	mongodbContainer, err := mongodb.Run(ctx, "mongo:6", mongodb.WithReplicaSet("rs0"))
	if err != nil {
		return nil, fmt.Errorf("starting MongoDB container: %w", err)
	}

	t.Cleanup(func() {
		if err := testcontainers.TerminateContainer(mongodbContainer); err != nil {
			t.Fatalf("failed to terminate MongoDB container: %v", err)
		}
	})

	endpoint, err := mongodbContainer.ConnectionString(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get MongoDB connection string: %w", err)
	}

	t.Log("MongoDB container endpoint:", endpoint)

	// adminClient, err := mongo.Connect(ctx, options.Client().ApplyURI(endpoint))
	// if err != nil {
	// 	t.Fatalf("failed to connect to MongoDB: %v", err)
	// }

	// hostAndPort, err := mongodbContainer.Endpoint(ctx, "")
	// if err != nil {
	// 	t.Fatalf("failed to get MongoDB container endpoint: %v", err)
	// }

	// t.Log("MongoDB container endpoint:", hostAndPort)

	// t.Log("Initializing replica set")

	// res := admin.RunCommand(ctx, bson.D{{"replSetInitiate", bson.D{
	// 	{"_id", "rs0"},
	// 	{"members", bson.A{
	// 		bson.D{
	// 			{"_id", 0}, {"host", "localhost:27017"},
	// 		}},
	// 	},
	// }}})
	// if res.Err() != nil {
	// 	return nil, fmt.Errorf("failed to initialize replica set: %v", res.Err())
	// }

	// t.Log("Replica set initialized")

	mongoClient, err := mongo.Connect(ctx, options.Client().ApplyURI(endpoint).SetReplicaSet("rs0"))
	if err != nil {
		t.Fatalf("failed to connect to MongoDB: %v", err)
	}

	t.Log("Connected to MongoDB")

	t.Log("Getting replica set status")

	admin := mongoClient.Database("admin")
	res := admin.RunCommand(ctx, bson.D{{"replSetGetStatus", 1}})
	if res.Err() != nil {
		return nil, fmt.Errorf("failed to get replica set status: %v", res.Err())
	}

	t.Log("Replica set status:", res)

	return mongoClient, nil
}
